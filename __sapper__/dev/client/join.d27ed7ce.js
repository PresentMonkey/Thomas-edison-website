import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, u as globals, a as space, e as element, t as text, w as empty, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, g as children, h as claim_text, k as add_location, l as insert_dev, m as append_dev, n as noop, j as attr_dev, x as set_input_value, y as listen_dev, z as run_all } from './client.7524bf97.js';

/* src/routes/join.svelte generated by Svelte v3.37.0 */

const { console: console_1 } = globals;
const file = "src/routes/join.svelte";

// (43:0) {:else}
function create_else_block(ctx) {
	let div;
	let label0;
	let t0;
	let input0;
	let t1;
	let br0;
	let t2;
	let label1;
	let t3;
	let input1;
	let t4;
	let br1;
	let t5;
	let button;
	let t6;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			label0 = element("label");
			t0 = text("Code:  ");
			input0 = element("input");
			t1 = space();
			br0 = element("br");
			t2 = space();
			label1 = element("label");
			t3 = text("Name:  ");
			input1 = element("input");
			t4 = space();
			br1 = element("br");
			t5 = space();
			button = element("button");
			t6 = text("Join");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			label0 = claim_element(div_nodes, "LABEL", { for: true });
			var label0_nodes = children(label0);
			t0 = claim_text(label0_nodes, "Code:  ");
			label0_nodes.forEach(detach_dev);
			input0 = claim_element(div_nodes, "INPUT", { id: true, type: true });
			t1 = claim_space(div_nodes);
			br0 = claim_element(div_nodes, "BR", {});
			t2 = claim_space(div_nodes);
			label1 = claim_element(div_nodes, "LABEL", { for: true });
			var label1_nodes = children(label1);
			t3 = claim_text(label1_nodes, "Name:  ");
			label1_nodes.forEach(detach_dev);
			input1 = claim_element(div_nodes, "INPUT", { id: true, type: true });
			t4 = claim_space(div_nodes);
			br1 = claim_element(div_nodes, "BR", {});
			t5 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", {});
			var button_nodes = children(button);
			t6 = claim_text(button_nodes, "Join");
			button_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(label0, "for", "code");
			add_location(label0, file, 44, 8, 565);
			attr_dev(input0, "id", "code");
			attr_dev(input0, "type", "text");
			add_location(input0, file, 44, 41, 598);
			add_location(br0, file, 44, 94, 651);
			attr_dev(label1, "for", "name");
			add_location(label1, file, 45, 8, 664);
			attr_dev(input1, "id", "name");
			attr_dev(input1, "type", "text");
			add_location(input1, file, 45, 41, 697);
			add_location(br1, file, 45, 96, 752);
			add_location(button, file, 46, 8, 765);
			add_location(div, file, 43, 4, 550);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, label0);
			append_dev(label0, t0);
			append_dev(div, input0);
			set_input_value(input0, /*form*/ ctx[1].code);
			append_dev(div, t1);
			append_dev(div, br0);
			append_dev(div, t2);
			append_dev(div, label1);
			append_dev(label1, t3);
			append_dev(div, input1);
			set_input_value(input1, /*form*/ ctx[1].name);
			append_dev(div, t4);
			append_dev(div, br1);
			append_dev(div, t5);
			append_dev(div, button);
			append_dev(button, t6);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[3]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[4]),
					listen_dev(button, "click", /*handleJoin*/ ctx[2], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*form*/ 2 && input0.value !== /*form*/ ctx[1].code) {
				set_input_value(input0, /*form*/ ctx[1].code);
			}

			if (dirty & /*form*/ 2 && input1.value !== /*form*/ ctx[1].name) {
				set_input_value(input1, /*form*/ ctx[1].name);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(43:0) {:else}",
		ctx
	});

	return block;
}

// (39:0) {#if joined}
function create_if_block(ctx) {
	let p0;
	let t0;
	let t1;
	let p1;
	let t2;
	let t3;
	let button;
	let t4;

	const block = {
		c: function create() {
			p0 = element("p");
			t0 = text("You have joined the class!");
			t1 = space();
			p1 = element("p");
			t2 = text("Connect your Virtual Box via usb to the computer and then click connect below");
			t3 = space();
			button = element("button");
			t4 = text("Connect");
			this.h();
		},
		l: function claim(nodes) {
			p0 = claim_element(nodes, "P", {});
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, "You have joined the class!");
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p1 = claim_element(nodes, "P", {});
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, "Connect your Virtual Box via usb to the computer and then click connect below");
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			button = claim_element(nodes, "BUTTON", {});
			var button_nodes = children(button);
			t4 = claim_text(button_nodes, "Connect");
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(p0, file, 39, 4, 386);
			add_location(p1, file, 40, 4, 424);
			add_location(button, file, 41, 4, 513);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p0, anchor);
			append_dev(p0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p1, anchor);
			append_dev(p1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, button, anchor);
			append_dev(button, t4);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p1);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(39:0) {#if joined}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*joined*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Join");
			t2 = space();
			if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1eu0qkx\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Join");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Join";
			add_location(h1, file, 34, 0, 352);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Join", slots, []);
	var { joined = false } = $$props;
	let form = { code: "", name: "" };

	function handleJoin() {
		console.log(form.code);
		console.log(form.name);
	}

	const writable_props = ["joined"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Join> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		form.code = this.value;
		$$invalidate(1, form);
	}

	function input1_input_handler() {
		form.name = this.value;
		$$invalidate(1, form);
	}

	$$self.$$set = $$props => {
		if ("joined" in $$props) $$invalidate(0, joined = $$props.joined);
	};

	$$self.$capture_state = () => ({ joined, form, handleJoin });

	$$self.$inject_state = $$props => {
		if ("joined" in $$props) $$invalidate(0, joined = $$props.joined);
		if ("form" in $$props) $$invalidate(1, form = $$props.form);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [joined, form, handleJoin, input0_input_handler, input1_input_handler];
}

class Join extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { joined: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Join",
			options,
			id: create_fragment.name
		});
	}

	get joined() {
		throw new Error("<Join>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set joined(value) {
		throw new Error("<Join>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Join;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiam9pbi5kMjdlZDdjZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9qb2luLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3ZlbHRlOmhlYWQ+XG4gICAgPHRpdGxlPkpvaW48L3RpdGxlPlxuPC9zdmVsdGU6aGVhZD5cbjxzY3JpcHQ+XG5cbiAgICAvL2ltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcblxuICAgIC8vY29uc3Qgc29ja2V0ID0gaW8oKTtcblxuICAgIGV4cG9ydCB2YXIgam9pbmVkID0gZmFsc2U7XG5cbiAgICBsZXQgZm9ybSA9IHtcbiAgICAgICAgY29kZTogJycsXG4gICAgICAgIG5hbWU6ICcnXG4gICAgfVxuXG4gICAgXG5cblxuXG4gICAgXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVKb2luKCl7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvcm0uY29kZSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZvcm0ubmFtZSk7XG4gICAgfVxuXG5cblxuPC9zY3JpcHQ+XG5cblxuXG5cbjxoMT5Kb2luPC9oMT5cblxuXG5cbnsjaWYgam9pbmVkfVxuICAgIDxwPllvdSBoYXZlIGpvaW5lZCB0aGUgY2xhc3MhPC9wPlxuICAgIDxwPkNvbm5lY3QgeW91ciBWaXJ0dWFsIEJveCB2aWEgdXNiIHRvIHRoZSBjb21wdXRlciBhbmQgdGhlbiBjbGljayBjb25uZWN0IGJlbG93PC9wPlxuICAgIDxidXR0b24+Q29ubmVjdDwvYnV0dG9uPlxuezplbHNlfVxuICAgIDxkaXYgPlxuICAgICAgICA8bGFiZWwgZm9yPVwiY29kZVwiPkNvZGU6ICA8L2xhYmVsPjxpbnB1dCBiaW5kOnZhbHVlPXtmb3JtLmNvZGV9IGlkPVwiY29kZVwiIHR5cGU9XCJ0ZXh0XCI+IDxicj5cbiAgICAgICAgPGxhYmVsIGZvcj1cIm5hbWVcIj5OYW1lOiAgPC9sYWJlbD48aW5wdXQgIGJpbmQ6dmFsdWU9e2Zvcm0ubmFtZX0gaWQ9XCJuYW1lXCIgdHlwZT1cInRleHRcIj4gIDxicj5cbiAgICAgICAgPGJ1dHRvbiBvbjpjbGljaz17aGFuZGxlSm9pbn0gPkpvaW48L2J1dHRvbj4gXG4gICAgPC9kaXY+XG57L2lmfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQ0E0QzRELEdBQUksSUFBQyxJQUFJOzs7Ozs7O29DQUNSLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7OztnREFDNUMsR0FBVTs7Ozs7Ozt1REFGd0IsR0FBSSxJQUFDLElBQUk7cUNBQVQsR0FBSSxJQUFDLElBQUk7Ozt1REFDUixHQUFJLElBQUMsSUFBSTtxQ0FBVCxHQUFJLElBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2lCQVBqRSxHQUFNOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTdCSSxNQUFNLEdBQUcsS0FBSztLQUVyQixJQUFJLEtBQ0osSUFBSSxFQUFFLEVBQUUsRUFDUixJQUFJLEVBQUUsRUFBRTs7VUFTSCxVQUFVO0VBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSTtFQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJOzs7Ozs7Ozs7O0VBb0IrQixJQUFJLENBQUMsSUFBSTs7Ozs7RUFDUixJQUFJLENBQUMsSUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
